def run_brunel(networkparamdict, fraction, plotting=True):
    p_rate = networkparamdict[ 'p_rate' ]
    C_m = networkparamdict[ 'C_m' ]
    gm = networkparamdict[ 'g' ]
    g1 = networkparamdict[ 'g_1' ]
    tau_1 = networkparamdict[ 'tau_1' ]
    V_dist = networkparamdict[ 'V_dist' ]
    Vdist2 = networkparamdict[ 'V_dist2' ]

    recstart = 7500.0
    simtime = 10000.0  # Simulation time in ms
    delay = 0.8  # synaptic delay in ms
    delay_ex = 1.5
    delay_in = 0.8
    g = 5.0  # ratio inhibitory weight/excitatory weight

    N = 4850
    NE = int((1.0 - fraction) * N)
    NR = int(fraction * N)
    NI = 1065
    N_neurons = NE + NI + NR  # number of neurons in total
    # record from N_rec neurons per population:
    N_rec = {'NE': int(NE / 10), 'NI': int(NI / 10), 'NR': int(NR / 10)}

    theta = -50.0  # membrane threshold potential in mVfrom stats
    tauSyn = 0.5

    neuron_params = {
        "C_m":        250.0,
        "tau_m":      10.0,
        "tau_syn_ex": tauSyn,
        "tau_syn_in": tauSyn,
        "t_ref":      2.0,
        "E_L":        -65.0,
        "V_reset":    -65.0,
        "V_m":        -65.0,
        "V_th":       theta}

    neuron_params2 = {
        "tau_1":      tau_1,
        "C_m":        C_m,
        "tau_syn_ex": tauSyn,
        "tau_syn_in": tauSyn,
        "g_rr":       g1,
        "g":          gm,
        "V_m":        theta - V_dist,
        "V_reset":    theta - V_dist,
        "E_L":        theta - V_dist - Vdist2,
        "V_th":       theta,
        "t_ref":      2.0}

    synweight = 87.8
    J = 0.125  # postsynaptic potential amplitude in mV
    J_ex = J  # amplitude of excitatory postsynaptic potential
    J_in = -g * J

    J = np.array([ [ J_ex, J_ex, J_ex ],
                   [ J_ex, J_ex, J_ex ],
                   [ J_in, J_in, J_in ] ])

    # get the new connectivity:
    conn_probs = [ [ 0.0831, 0.3726 ], [ 0.060, 0.3158 ] ]
    layers = {'L5': 0}
    pops = {'E': 0, 'I': 1}
    newpopdict = {'E': 0, 'I': 1, 'R': 2}
    new_structure = {'L5': {'E': 0, 'I': 1, 'R': 2}}
    N_full_new = {'L5': {'E': NE, 'I': 1065, 'R': NR}}
    N_full_old = {'L5': {'E': 4050, 'I': 1065}}
    C = compute_new_connectivity(conn_probs, N_full_new, N_full_old,
                                 layers, pops, newpopdict, new_structure)

    C[ 0, : ] *= NE
    C[ 1, : ] *= NR
    C[ 2, : ] *= NI
    C = np.array(C, dtype=int)
    N_pre = np.array([ NE, 1065, NR ], dtype=int)
    N_pp = np.outer(N_pre, N_pre)
    # C_a = TODO!!
    # print(C)

    # print"Building network")
    startbuild = time.time()
    nest.SetDefaults("iaf_psc_exp", neuron_params)
    nest.SetDefaults("gif2_psc_exp", neuron_params2)
    nodes_ex = nest.Create("iaf_psc_exp", NE)
    nodes_re = nest.Create("gif2_psc_exp", NR)
    nodes_in = nest.Create("iaf_psc_exp", NI)
    noise = nest.Create("sinusoidal_poisson_generator")
    espikes = nest.Create("spike_detector")
    rspikes = nest.Create("spike_detector")
    ispikes = nest.Create("spike_detector")

    nest.SetStatus(noise, [
        {"rate":  p_rate, "amplitude": 0.025 * 0.0, "frequency": 10.0,
         "phase": 0.0} ])
    nest.SetStatus(espikes, [
        {"label":   "brunel-py-ex", "withtime": True, "withgid": True,
         "to_file": False, 'start': recstart} ])
    nest.SetStatus(rspikes, [
        {"label":   "brunel-py-res", "withtime": True, "withgid": True,
         "to_file": False, 'start': recstart} ])
    nest.SetStatus(ispikes, [
        {"label":   "brunel-py-in", "withtime": True, "withgid": True,
         "to_file": False, 'start': recstart} ])

    # print"Connecting devices")
    try:
        nest.CopyModel("static_synapse", "excite",
                       {"weight": J_ex * synweight, "delay": delay})
    except:
        pass

    nest.Connect(noise, nodes_ex, syn_spec="excite")
    nest.Connect(noise, nodes_in, syn_spec="excite")
    nest.Connect(noise, nodes_re, syn_spec="excite")
    nest.Connect(nodes_ex[ 0:N_rec[ 'NE' ] ], espikes, syn_spec="excite")
    nest.Connect(nodes_re[ 0:N_rec[ 'NR' ] ], rspikes, syn_spec="excite")
    nest.Connect(nodes_in[ 0:N_rec[ 'NI' ] ], ispikes, syn_spec="excite")

    nest.Connect(nodes_ex, nodes_ex,
                 conn_spec={'rule': 'fixed_indegree', 'indegree': C[ 0, 0 ]},
                 syn_spec={'weight': J[ 0, 0 ], "delay": delay_ex})
    nest.Connect(nodes_ex, nodes_re,
                 conn_spec={'rule': 'fixed_indegree', 'indegree': C[ 0, 1 ]},
                 syn_spec={'weight': J[ 0, 1 ], "delay": delay_ex})
    nest.Connect(nodes_ex, nodes_in,
                 conn_spec={'rule': 'fixed_indegree', 'indegree': C[ 0, 2 ]},
                 syn_spec={'weight': J[ 0, 2 ], "delay": delay_ex})
    # print"Resonating connections")
    nest.Connect(nodes_re, nodes_ex,
                 conn_spec={'rule': 'fixed_indegree', 'indegree': C[ 1, 0 ]},
                 syn_spec={'weight': J[ 1, 0 ], "delay": delay_ex})
    nest.Connect(nodes_re, nodes_re,
                 conn_spec={'rule': 'fixed_indegree', 'indegree': C[ 1, 1 ]},
                 syn_spec={'weight': J[ 1, 1 ], "delay": delay_ex})
    nest.Connect(nodes_re, nodes_in,
                 conn_spec={'rule': 'fixed_indegree', 'indegree': C[ 1, 2 ]},
                 syn_spec={'weight': J[ 1, 2 ], "delay": delay_ex})
    # print"Inhibitory connections")
    nest.Connect(nodes_in, nodes_ex,
                 conn_spec={'rule': 'fixed_indegree', 'indegree': C[ 2, 0 ]},
                 syn_spec={'weight': J[ 2, 0 ], "delay": delay_in})
    nest.Connect(nodes_in, nodes_re,
                 conn_spec={'rule': 'fixed_indegree', 'indegree': C[ 2, 1 ]},
                 syn_spec={'weight': J[ 2, 1 ], "delay": delay_in})
    nest.Connect(nodes_in, nodes_in,
                 conn_spec={'rule': 'fixed_indegree', 'indegree': C[ 2, 2 ]},
                 syn_spec={'weight': J[ 2, 2 ], "delay": delay_in})

    endbuild = time.time()

    # print"Simulating")
    nest.Simulate(simtime + recstart)
    endsimulate = time.time()

    # print'Computing results')
    events_ex = nest.GetStatus(espikes, "events")[ 0 ]
    events_re = nest.GetStatus(rspikes, "events")[ 0 ]
    events_in = nest.GetStatus(ispikes, "events")[ 0 ]
    nevents_ex = nest.GetStatus(espikes, "n_events")[ 0 ]
    nevents_re = nest.GetStatus(rspikes, "n_events")[ 0 ]
    nevents_in = nest.GetStatus(ispikes, "n_events")[ 0 ]
    rate_ex = nevents_ex / simtime * 1000.0 / N_rec[ 'NE' ]
    rate_re = nevents_re / simtime * 1000.0 / N_rec[ 'NR' ]
    rate_in = nevents_in / simtime * 1000.0 / N_rec[ 'NI' ]

    # CVs:
    spiketrains_ex = list()
    spiketrains_in = list()
    spiketrains_re = list()
    for gid in nodes_ex:
        spiketrains_ex.append(
                events_ex[ 'times' ][ events_ex[ 'senders' ] == gid ])
    for gid in nodes_re:
        spiketrains_re.append(
                events_re[ 'times' ][ events_re[ 'senders' ] == gid ])
    for gid in nodes_in:
        spiketrains_in.append(
                events_in[ 'times' ][ events_in[ 'senders' ] == gid ])
    spiketrains_allex = spiketrains_ex + spiketrains_re
    spiketrains_all = spiketrains_allex + spiketrains_in
    cv_ex = np.nanmean(
            [ cv(isi(spiketrain)) for spiketrain in spiketrains_ex ])
    cv_re = np.nanmean(
            [ cv(isi(spiketrain)) for spiketrain in spiketrains_re ])
    cv_in = np.nanmean(
            [ cv(isi(spiketrain)) for spiketrain in spiketrains_in ])
    cv_all = np.nanmean(
            [ cv(isi(spiketrain)) for spiketrain in spiketrains_all ])

    if plotting:
        plt.clf()
        # Raster:
        figu = plt.figure("Rasterplot")
        offset = 0
        for spiketrain in spiketrains_ex:
            if np.any(spiketrain):
                offset += 1
                figu.add_subplot(1, 1, 1)
                plt.plot(spiketrain - recstart, offset * np.ones_like(spiketrain),
                         'b.',
                         markersize=3)
        for spiketrain in spiketrains_re:
            if np.any(spiketrain):
                offset += 1
                figu.add_subplot(1, 1, 1)
                plt.plot(spiketrain - recstart, offset * np.ones_like(spiketrain),
                         'g.',
                         markersize=3)
        for spiketrain in spiketrains_in:
            if np.any(spiketrain):
                offset += 1
                figu.add_subplot(1, 1, 1)
                plt.plot(spiketrain - recstart, offset * np.ones_like(spiketrain),
                         'r.',
                         markersize=3)
        plt.ylim(0, offset)
        plt.xlim(0, simtime)
        plt.savefig('driven_plots/Rasterplot_{2}_{0}_{1}.png'.format(
                int(fraction) * 10, 10, int(p_rate)))
    return [ fraction, rate_ex, rate_in, rate_re, cv_ex, cv_in, cv_re, cv_all,
             recstart, simtime ], [ spiketrains_all, spiketrains_ex,
                                    spiketrains_in, spiketrains_re, espikes,
                                    ispikes, rspikes ]
